# MOTD
fortune | cowthink

# Export
# export PATH="/usr/local/bin:$PATH"
export EDITOR='vim'

# ffmpeg build from source for robot for elderly
# export PATH=$PATH:/usr/local/ffmpeg/bin
# export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/ffmpeg/lib
export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:/usr/local/ffmpeg/lib/pkgconfig/

# Alias
## flask app
alias run_flask='export LC_ALL=en_US.UTF-8 && export LANG=en_US.UTF-8 && export FLASK_APP=main.py && export FLASK_DEBUG=1 && flask run --host=0.0.0.0 --port 5000'

## github page - jekyll serve
alias ghpjks='bundle exec jekyll serve'

## jupyter notebook
alias jn='jupyter notebook'

## source .bash_profile
alias srcbpf='source ~/.bash_profile'
alias srcz='source ~/.zshrc'
alias srccstm='source ~/.custom-bash'

## hide & show files
alias unhideFiles='defaults write com.apple.finder AppleShowAllFiles YES; killall Finder /System/Library/CoreServices/Finder.app'
alias hideFiles='defaults write com.apple.finder AppleShowAllFiles NO; killall Finder /System/Library/CoreServices/Finder.app'

## directory shortcuts

## command
#alias l='ls -tlcras'
alias s='du -sh'
#alias mux='tmuxinator' # deprecated move to tmux-resurrect
. <(gr completion)

##########

# App shortcuts
## Safari
safari() {
  open -a Safari.app "$1"
} 

## Chrome
chrome() {
  open -a "Google Chrome.app" "$1"
}

## Preview
preview() {
  open -a Preview.app "$1"
}

## VS Code
code() { 
    VSCODE_CWD="$PWD" open -n -b "com.microsoft.VSCode" --args $* ;
}
##########

# Some useful stuffs
## image converter
jpg2png() {
    sips -s format png $1 --out "$(getfilename $1)".png
    optipng "$(getfilename $1)".png
}

png2jpg() {
    sips -s format jpeg $1 --out "$(getfilename $1)".jpeg
    mv "$(getfilename $1)".jpeg "$(getfilename $1)".jpg
    echo ".jpeg -> .jpg done"
}

## get filename
getfilename() {
    filename=$(basename "$1")
    filename="${filename%.*}"
    filename="$filename"
    echo $filename
}

## Song Trimmer
## trimmer <song> <start(sec)> <duration(sec)>
trimmer() {
  ffmpeg -i "$1" -ss "$2" -t "$3" -acodec copy cut_"$1" 
}

## mp3 Converter
## convert every songs in dir to mp3
tomp3() {
  # for folder in ~/Music/songs/*;
  # do
    for file in $PWD/*;
    do
      echo $file
      if [[ "${file##*/}" == "original" || "${file##*/}" == "mp3" ]]; then
        echo ${file##*/}" will not be converted."
        echo "####################"
        echo ""
      else
        if [ ! -d $PWD/mp3 ]; then
          mkdir $PWD/mp3
          echo $PWD"/mp3 is created"
          echo "####################"
          echo ""
        fi

        if [[ $file == *".wma"* || $file == *".webm"* || $file == *".m4a"* ]]; then
          echo "converting ""${file##*/}"" to .mp3..."
          ffmpeg -v quiet -i "$file" -acodec libmp3lame "${file%.*}"".mp3";
          mv "${file%.*}"".mp3" $PWD/mp3/
          echo "${file##*/}"".mp3"" is moved to /mp3"
          echo "####################"
          echo ""
        else
          echo "this file is not converted"
          echo "####################"
          echo ""
        fi
      fi
    done
  # done
}

##########

# youtube-dl add-on
## due to certification error, this alias is to bypass

chk-ytdl-dir() {
if [ ! -d ~/Music/youtube-dl ]; then
  mkdir ~/Music/youtube-dl
  echo "created ~/Music/youtube-dl"
  mkdir ~/Music/youtube-dl/videos
  echo "created ~/Music/youtube-dl/videos"
fi
}

ytdl() {
  ## checking
  testlen=$1
  if [[ $# -gt 2 ]]; then
    echo "Only 2 arguments are allowed!"
    return 1
  fi
  if [[ ${#testlen} -gt 4 ]]; then
    echo "Maximum length of option is 4.. (-sph or -vph)"
    return 1
  fi
  if [[ $1 == *"s"* && $1 == *"v"* ]]; then
    echo "Could not download both song and video at once!"
    return 1
  fi

  ## downloading
  chk-ytdl-dir
  curdir="$PWD"
  if [[ $1 != *"h"* ]]; then
    cd ~/Music/youtube-dl/
  else
    echo "Download to current path.."
  fi
  if [[ $1 == *"s"* ]]; then
    echo "Downloading song.."
    if [[ $1 == *"p"* ]]; then
      echo "With proxy.."
      youtube-dl -o "%(title)s.%(ext)s" -f "m4a" --proxy "" --no-check-certificate $2
    else
      youtube-dl -o "%(title)s.%(ext)s" -f "bestaudio" --no-check-certificate $2
    fi
  elif [[ $1 == *"v"* ]]; then
    cd ~/Music/youtube-dl/videos
    echo "Downloading video.."
    if [[ $1 == *"p"* ]]; then
      echo "With proxy.."
      youtube-dl -o "%(title)s.%(ext)s" -f "best" --proxy "" --no-check-certificate $2
    else
      youtube-dl -o "%(title)s.%(ext)s" -f "best" --no-check-certificate $2
    fi
  else
    echo "No satisfied parameters filled.."
    echo "Please use -s for song, -v for video, -p if proxy and -h to save to current path."
  fi
  cd $curdir
}

chk-dup-song() {
  fdupes -r -d ~/Music/youtube-dl/
}
